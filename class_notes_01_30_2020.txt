Today is 01/30/2020

	Some review:

		we will use Spartan.
		POST, GET
		build POJO

	after lunch break

		DELETE
		PUT

####################################################


Explore spartan app on your ec2(cybertek_instance). Just enter host address of ec2 + :8000 as port number.


If you don't have ec2, please use mine:
App: http://ec2-34-201-69-55.compute-1.amazonaws.com:8000
Swagger doc: http://ec2-34-201-69-55.compute-1.amazonaws.com:8000/swagger-ui.html#/

variable name: baseUrl
variable value: http://ec2-34-201-69-55.compute-1.amazonaws.com:8000

	baseUrl+/api/spartans | end point, and this one returns list of users

 * Since the content-type is "application/json" then REST Assured will automatically try to serialize the object using

     * <a href="https://github.com/FasterXML/jackson">Jackson</a> or <a href="https://github.com/google/gson">Gson</a> if they are
     * available in the classpath. If any of these frameworks are not in the classpath then an exception is thrown.
     * <br />
     * If the content-type is "application/xml" then REST Assured will automatically try to serialize the object using <a href="http://jaxb.java.net/">JAXB</a>
     * if it's available in the classpath. Otherwise an exception will be thrown.
     * <br />
     * If no request content-type is specified then REST Assured determine the parser in the following order:
     * <ol>
     * <li>Jackson</li>
     * <li>Gson</li>
     * <li>JAXB</li>
     * </ol>
     * <p>
     *
     * @param object The object to serialize and send with the request
     * @return The request specification
     */

 	 * given().
     *         contentType("application/json").
     *         body(message).
     * when().
     *         post("/beautiful-message").
     * then().
     *         body(equalTo("Response to a beautiful message")).


Before: [451, 450, 446, 445, 444, 443, 442, 441, 440, 439, 438, 436, 435, 428, 427, 426, 425, 424, 423, 396, 395, 394, 392, 391, 388, 385, 384, 381, 379, 378, 377, 374, 373, 370, 369, 367, 366, 364, 363, 362, 361, 360, 359, 358, 357, 355, 351, 350, 349, 348, 347, 345, 343, 342, 341, 340, 339, 337, 335, 334, 333, 332, 331, 328, 327, 325, 323, 321, 320, 319, 318, 317, 315, 311, 309, 308, 307, 304, 303, 302, 264, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 245, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 227, 226, 225, 224, 222, 221, 220, 219, 218, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 197, 196, 195, 194, 193, 192, 191, 190, 189, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 165, 159, 158, 157, 156, 155, 154, 147, 132, 117, 116, 115, 113, 109, 108, 104, 103, 102, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 42, 41, 39, 38, 37, 36, 35, 33, 30, 29, 28, 27, 26, 25, 24, 22]

After: 500 Server error

new server link: http://ec2-3-81-4-150.compute-1.amazonaws.com:8000/








